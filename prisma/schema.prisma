// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient{
  id String @id @default(cuid())
  name String
  age Int
  gender Gender
  phone String 
  email String?
  medical_history Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cases PatientCase[] @relation("PatientToCases")
}

model PatientCase {
  id                    String       @id @default(cuid())
  zone                  Zone
  si                    Int          // Severity Index (1–4)
  news2                 Int          // NEWS2 Score (0–20)
  resource_score        Float
  age                   Int
  vitals                Json?
  
  priority              Float
  treatment_duration Int?  
  status                CaseStatus   @default(WAITING)

  //
  arrival_time          DateTime
  last_eval_time        DateTime
  time_served           DateTime?

  //
  disease_code          String?      // e.g., ICD-10 code
  disease              Disease?     @relation(fields: [disease_code], references: [code])

  //
  // assigned_bed          Beds?        @relation("BedToPatientCase")
  //
  patient_id            String
  patient               Patient      @relation("PatientToCases", fields: [patient_id], references: [id])

  // Logs relation
  logs                 CaseLog[]

  @@index([zone, status])
  @@index([patient_id])
  @@index([time_served])
  @@index([status, zone])
  @@index([priority]) 
  @@index([status, last_eval_time]) // For auto-discharge
}

model Disease {
  id             String @id @default(cuid())
  code           String @unique  // e.g., "J18.9", "I21.9"
  name           String
  description    String?
  treatment_time Int    // in minutes
  max_wait_time  Int    // max acceptable wait (minutes)
  severity       Int    // Severity Index 1–4 (1 = least severe, 4 = most severe)
  resource_score Float  @default(1.0) // Resource Score (disease-level default)
  patientCases   PatientCase[] 
}


// model Beds {
//   id String @id @default(cuid()) 
//   bed_number String @unique
//   zone Zone 
//   case_id String? @unique  
//   patient_case PatientCase? @relation("BedToPatientCase", fields: [case_id], references: [id])
//   assigned_at DateTime? 
// }


enum CaseStatus {
  WAITING
  IN_TREATMENT
  DISCHARGED
  TRANSFERRED
}

enum Action {
  ASSIGN_BED
  RELEASE_BED
  EXTEND_BED
  OVERRIDE_PRIORITY
}

enum Zone {  
  RED
  ORANGE
  YELLOW 
  GREEN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// Logging models
model CaseLog {
  id                    String       @id @default(cuid())
  case_id               String
  patient_case          PatientCase  @relation(fields: [case_id], references: [id])
  patient_id            String
  zone                  Zone
  age                   Int
  age_factor            Int
  arrival_time          DateTime
  disease_code          String?
  treatment_start_time  DateTime?
  treatment_end_time    DateTime?
  total_time_in_ed      Int?
  escalation            Boolean?     @default(false)
  outcome               String?
  created_at            DateTime     @default(now())
  updates               CaseUpdate[]

  @@index([case_id])
  @@index([patient_id])
}

model CaseUpdate {
  id              String   @id @default(cuid())
  case_log_id     String
  case_log        CaseLog  @relation(fields: [case_log_id], references: [id])
  timestamp       DateTime @default(now())
  vitals_json     Json
  news2           Int
  si              Int
  resourceScore   Float
  priority        Float
  waiting_time    Int
  rank_in_queue   Int?
  status          CaseStatus

  @@index([case_log_id, timestamp])
}